###############################################################################


# Ensure all properties are exported as shell env-vars
set export

# set the current directory, and the location of the test dats
CWDIR := justfile_directory()

_default:
  @just -f {{justfile()}} --list

# Shut down the microfab (uf) instance
microfab-down:
    #!/bin/bash

    if docker inspect microfab &>/dev/null; then
        echo "Removing existing microfab container:"
        docker kill microfab
    fi

deploy:
    #!/bin/bash

    set -e -o pipefail
    export CFG=$CWDIR/_cfg/uf
    rm -rf ${CFG}    
    curl -sSL --insecure https://console.localho.st:8080/ak/api/v1/components | weft microfab -w $CFG/_wallets -p $CFG/_gateways -m $CFG/_msp -f

    export LANG=java

    export CORE_PEER_TLS_ROOTCERT_FILE=$CFG/_msp/tls/org1peer/org1pee-cert.pem
    export CORE_PEER_LOCALMSPID=org1MSP
    export CORE_PEER_MSPCONFIGPATH=$CFG/_msp/org1/org1admin/msp
    export CORE_PEER_ADDRESS=org1peer-api.localho.st:8080
    export CORE_PEER_CLIENT_CONNTIMEOUT=15s
    export CORE_PEER_DELIVERYCLIENT_CONNTIMEOUT=15s
    export CORE_PEER_TLS_ROOTCERT_FILE=$CFG/_msp/tls/org1peer/org1peer-cert.pem
    export CORE_PEER_TLS_ENABLED=true
    export ORDERER_CA=$CFG/_msp/tls/orderer/tlsca-orderer-cert.pem

    peer lifecycle chaincode install ./atx-$LANG.tgz
    peer lifecycle chaincode queryinstalled 
    export PACKAGE_ID=$(peer lifecycle chaincode queryinstalled | awk -F' ' "/atx-$LANG/ { \$3=substr(\$3,1,length(\$3)-1); print \$3 }")
    echo "PACKAGE_ID = ${PACKAGE_ID}"

    peer lifecycle chaincode approveformyorg --orderer orderer-api.localho.st:8080 --channelID ch-b --name atx_$LANG -v 0 --package-id ${PACKAGE_ID} --sequence 1 --tls --cafile ${ORDERER_CA}
    peer lifecycle chaincode commit --orderer orderer-api.localho.st:8080 --channelID ch-b --name atx_$LANG -v 0 --sequence 1 --tls --cafile ${ORDERER_CA} --waitForEvent

    peer chaincode query -C ch-b -n atx_$LANG -c '{"Args":["org.hyperledger.fabric:GetMetadata"]}' | jq

# Deply to TLS enabled to both orgs
deploy2:
    #!/bin/bash

    set -ex -o pipefail
    export CFG=$CWDIR/_cfg/uf
    rm -rf ${CFG}    

    # Get the configuration and extract the information
    curl -sSL --insecure https://console.localho.st:8080/ak/api/v1/components | weft microfab -w $CFG/_wallets -p $CFG/_gateways -m $CFG/_msp -f

    # Configure Environment Context for Org1
    export CORE_PEER_TLS_ROOTCERT_FILE=$CFG/_msp/tls/org1peer/org1peer-cert.pem
    export CORE_PEER_LOCALMSPID=org1MSP
    export CORE_PEER_MSPCONFIGPATH=$CFG/_msp/org1/org1admin/msp
    export CORE_PEER_ADDRESS=org1peer-api.localho.st:8080
    export CORE_PEER_CLIENT_CONNTIMEOUT=15s
    export CORE_PEER_DELIVERYCLIENT_CONNTIMEOUT=15s    
    export CORE_PEER_TLS_ENABLED=true
    export ORDERER_CA=$CFG/_msp/tls/orderer/tlsca-orderer-cert.pem

    # Install to the peer
    #export LANG=java
    export LANG=javascript
    
    peer lifecycle chaincode install ../integration/data/asset-transfer-basic-${LANG}.tgz
    
    export PACKAGE_ID=$(peer lifecycle chaincode queryinstalled | awk -F' ' "/asset-transfer-basic-$LANG/ { \$3=substr(\$3,1,length(\$3)-1); print \$3 }")
    echo "PACKAGE_ID = ${PACKAGE_ID}"
    
    # Approved for org1
    peer lifecycle chaincode approveformyorg --orderer orderer-api.localho.st:8080 --channelID ch-a --name atx$LANG -v 0 --package-id ${PACKAGE_ID} --sequence 1 --tls --cafile ${ORDERER_CA}
    
    # Swap to Org 2 - note the TLS certs for microfab are the same for each org
    export CORE_PEER_LOCALMSPID=org2MSP
    export CORE_PEER_ADDRESS=org2peer-api.localho.st:8080
    export CORE_PEER_MSPCONFIGPATH=$CFG/_msp/org2/org2admin/msp
    ## export CORE_PEER_TLS_ROOTCERT_FILE=<correct for this org>
    
    # Install and Approve for the second org
    peer lifecycle chaincode install  ../integration/data/asset-transfer-basic-${LANG}.tgz
    peer lifecycle chaincode approveformyorg --orderer orderer-api.localho.st:8080 --channelID ch-a --name atx$LANG -v 0 --package-id ${PACKAGE_ID} --sequence 1 --tls --cafile ${ORDERER_CA}
        
    peer lifecycle chaincode commit --orderer orderer-api.localho.st:8080 --channelID ch-a --name atx$LANG -v 0 --sequence 1 --tls --cafile ${ORDERER_CA} --waitForEvent

    # Query metadata - aka a 'ping' to the chaincode
    peer chaincode query -C ch-a -n atx$LANG -c '{"Args":["org.hyperledger.fabric:GetMetadata"]}' | jq

deploy-notls:
    #!/bin/bash

    set -ex -o pipefail
    export CFG=$CWDIR/_cfg/uf
    rm -rf ${CFG}    

    # Get the configuration and extract the information
    curl -sSL http://console.localho.st:8080/ak/api/v1/components | weft microfab -w $CFG/_wallets -p $CFG/_gateways -m $CFG/_msp -f

    # Install to the peer
    export LANG=typescript

    # Configure Environment Context for Org1    
    export CORE_PEER_LOCALMSPID=org1MSP
    export CORE_PEER_MSPCONFIGPATH=/home/matthew/github.com/hyperledger-labs/microfab/examples/_cfg/uf/_msp/org1/org1admin/msp
    export CORE_PEER_ADDRESS=org1peer-api.localho.st:8080
    export CORE_PEER_CLIENT_CONNTIMEOUT=15s
    export CORE_PEER_DELIVERYCLIENT_CONNTIMEOUT=15s    
    export CORE_PEER_TLS_ENABLED=false
    

    # Install to the peer
    peer lifecycle chaincode install ../integration/data/asset-transfer-basic-$LANG.tgz
    export PACKAGE_ID=$(peer lifecycle chaincode queryinstalled --output json | jq -r '.installed_chaincodes[0].package_id')
    echo "PACKAGE_ID = ${PACKAGE_ID}"
    
    # Approved for org1
    peer lifecycle chaincode approveformyorg --orderer orderer-api.localho.st:8080 --channelID ch-a --name atx -v 0 --package-id ${PACKAGE_ID} --sequence 1 
    
    # Swap to Org 2 - note the TLS certs for microfab are the same for each org
    export CORE_PEER_LOCALMSPID=org2MSP
    export CORE_PEER_ADDRESS=org2peer-api.localho.st:8080
    export CORE_PEER_MSPCONFIGPATH=/home/matthew/github.com/hyperledger-labs/microfab/examples/_cfg/uf/_msp/org2/org2admin/msp
    
    
    peer lifecycle chaincode install ../integration/data/asset-transfer-basic-${LANG}.tgz
    peer lifecycle chaincode approveformyorg --orderer orderer-api.localho.st:8080 --channelID ch-a --name atx -v 0 --package-id ${PACKAGE_ID} --sequence 1 
        
    peer lifecycle chaincode commit --orderer orderer-api.localho.st:8080 --channelID ch-a --name atx -v 0 --sequence 1 --waitForEvent

    peer chaincode query -C ch-a -n atx -c '{"Args":["org.hyperledger.fabric:GetMetadata"]}' | jq

# Start multiple channels with TLS enabled
microfab: microfab-down
    #!/bin/bash
    export MICROFAB_CONFIG='{
        "couchdb":false,
        "endorsing_organizations":[
            {
                "name": "org1"
            }, 
            {
                "name":"org2"
            }

        ],
        "channels":[
            {
                "name": "ch-a",
                "endorsing_organizations":[
                    "org1","org2"
                ]
            },
            {
                "name": "ch-b",
                "endorsing_organizations":[
                    "org1"
                ]
            }
        ],
        "domain":"localho.st",
        "tls": {
            "enabled":true
        },
        "capability_level":"V2_0",
        "ordering_service":{
            "type":"solo"
        }
    }'
    # solo | raft
    
    #docker run --name microfab -p 8080:8080 -p 2000:2000 -p 2001:2001 -p 2002:2002 -p 2003:2003 -p 2004:2004 -p 4000:4000 --add-host host.docker.internal:host-gateway --rm -e MICROFAB_CONFIG="${MICROFAB_CONFIG}" --network fabnet -e FABRIC_LOGGING_SPEC=info tls/microfab
    docker run --name microfab -p 8080:8080 --add-host host.docker.internal:host-gateway --rm -e MICROFAB_CONFIG="${MICROFAB_CONFIG}" --network fabnet -e FABRIC_LOGGING_SPEC=info tls/microfab
