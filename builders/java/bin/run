#!/usr/bin/env bash
#
# SPDX-License-Identifier: Apache-2.0
#
set -euo pipefail
exec 1>&2
BUILD_OUTPUT_DIR="$1"
RUN_METADATA_DIR="$2"

# setup the environment expected by the node chaincode shim
CORE_CHAINCODE_ID_NAME="$(jq -r .chaincode_id "${RUN_METADATA_DIR}/chaincode.json")"
CORE_PEER_LOCALMSPID="$(jq -r .mspid "${RUN_METADATA_DIR}/chaincode.json")"
export CORE_CHAINCODE_ID_NAME CORE_PEER_LOCALMSPID

export CORE_PEER_TLS_ENABLED="true"
export CORE_TLS_CLIENT_CERT_PATH="$BUILD_OUTPUT_DIR/client.crt"
export CORE_TLS_CLIENT_KEY_PATH="$BUILD_OUTPUT_DIR/client.key"
export CORE_PEER_TLS_ROOTCERT_FILE="$BUILD_OUTPUT_DIR/root.crt"

# Note the processing of the certs/keys. Some need to be PEM, some base64 encoded PEM
# Java's base64 parsing also fussy about whitepace/newlines hence the --wrap
jq -r .client_cert "$RUN_METADATA_DIR/chaincode.json" | base64 --wrap=0 > "$CORE_TLS_CLIENT_CERT_PATH"
jq -r .client_key  "$RUN_METADATA_DIR/chaincode.json" | base64 --wrap=0 > "$CORE_TLS_CLIENT_KEY_PATH"
jq -r .root_cert   "$RUN_METADATA_DIR/chaincode.json"> "$CORE_PEER_TLS_ROOTCERT_FILE"
if [ -z "$(jq -r .client_cert "$RUN_METADATA_DIR/chaincode.json")" ]; then
    export CORE_PEER_TLS_ENABLED="false"
fi

# enable debug mode - as this primarily a development environment
export CORE_CHAINCODE_LOGGING_LEVEL=debug
export CORE_CHAINCODE_LOGGING_SHIM=debug

cd "${BUILD_OUTPUT_DIR}"
LIB_DIR=/opt/fabric-chaincode-java/lib
LIB_JARS=$(find ${LIB_DIR} -name "*.jar" | paste -s -d ":" -)
CHAINCODE_JARS=$(find "${BUILD_OUTPUT_DIR}" -name "*.jar" | paste -s -d ":" -)
NUM_CHAINCODE_JARS=$(find "${BUILD_OUTPUT_DIR}" -name "*.jar" | wc -l)

if [ -f "${BUILD_OUTPUT_DIR}/.uberjar" ]; then
    if [ "${NUM_CHAINCODE_JARS}" -ne 1 ]; then
        echo Cannot start uber JAR as more than one JAR file was found in the chaincode directory >&2
        exit 1
    fi
    exec java -jar "${CHAINCODE_JARS}" --peerAddress="$(jq -r .peer_address "${RUN_METADATA_DIR}/chaincode.json")"
else
    exec java -cp "${CHAINCODE_JARS}:${LIB_JARS}" org.hyperledger.fabric.contract.ContractRouter --peerAddress="$(jq -r .peer_address "${RUN_METADATA_DIR}/chaincode.json")"
fi